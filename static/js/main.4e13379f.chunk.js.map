{"version":3,"sources":["components/Loader.tsx","utilities/toCamelcase.ts","components/CourseItem.tsx","components/CourseList.tsx","components/FiltersButtonOpen.tsx","components/FiltersButtonClose.tsx","components/FiltersButton.tsx","components/Slider.tsx","components/Input.tsx","components/Autocomplete.tsx","components/AutocompleteVirtual.tsx","utilities/search.ts","components/FiltersMenu.tsx","components/Search.tsx","components/CoursesNum.tsx","components/Logo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loader","className","this","props","loading","Component","defaultProps","toCamelcase","string","split","map","word","letter","index","toUpperCase","toLowerCase","join","CourseItem","style","href","course","objectUrl","title","name","target","rel","partners","entityType","replace","CourseList","item","courses","left","top","width","coursesNum","height","window","innerWidth","itemCount","itemSize","FiltersButtonOpen","FiltersButtonClose","FiltersButton","handleClick","e","preventDefault","toggleFiltersMenuStatus","onClickCapture","filtersMenuIsOpen","PKSlider","withStyles","root","color","padding","thumb","backgroundColor","boxShadow","marginTop","marginLeft","active","valueLabel","background","track","rail","opacity","mark","markActive","Slider","PKInput","fontFamily","fontSize","borderBottom","borderColor","TextField","PKAutocomplete","paper","listbox","display","lineHeight","overflow","whiteSpace","textOverflow","minHeight","tag","Autocomplete","renderRow","data","React","cloneElement","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","gridRef","useRef","useEffect","current","resetAfterIndex","useResetCache","length","Provider","value","outerElementType","innerElementType","overscanCount","renderGroup","params","useStyles","makeStyles","boxSizing","margin","InputAutocompleteVirtual","multiple","disableListWrap","classes","onChange","options","renderInput","Input","type","search","query","filters","facets","from","algoliasearch","process","initIndex","filter","reduce","categorizedFilters","currentFilter","currentFilterCategory","find","values","push","filterCategory","numericFilters","maxValuesPerFacet","hitsPerPage","AverageRatingMarks","FiltersMenu","filtersMenuRef","averageRatingSubject$","numericInputSubject$","autocompleteInputSubject$","booleanInputSubject$","updateAverageRating","event","next","updateNumericInput","operator","parseInt","error","updateAutocompleteInput","updateBooleanInput","update","filtersMenuSetState","searchQuery","state","pipe","take","tap","results","hits","nbHits","subscribe","createRef","Subject","distinctUntilChanged","switchMap","min","max","setState","concat","of","debounceTime","includes","isNaN","selectedInputsAsArray","selectedInput","disableBodyScroll","enableBodyScroll","unsubscribe","sort","step","defaultValue","marks","onChangeCommitted","valueLabelDisplay","placeholder","numProductRatings","enrollments","avgLearningHours","reason","language","productDifficultyLevel","AutocompleteVirtual","partner","skills","skill","careers","career","subtitleLanguage","Search","inputRef","inputSubscription","searchSubscription","fromEvent","searchSetState","CoursesNum","Logo","src","alt","App","allData","getAllData","forEach","facet","Object","keys","enrollment","Math","undefined","isPartOfCourseraPlus","topic","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4e13379f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Loader.scss\";\n\ntype LoaderProps = {\n    loading: boolean;\n};\n\nclass Loader extends Component<LoaderProps> {\n    static defaultProps = {\n        loading: false,\n    };\n\n    render() {\n        return (\n            <div\n                className={\n                    (this.props.loading ? \"open \" : \"\") +\n                    \"loader fixed z-50 top-0 left-0 w-full h-full\"\n                }\n            >\n                <div className=\"background absolute top-0 left-0 w-full h-full bg-gray-200\"></div>\n                <div className=\"spinner_wrapper flex w-full h-full items-center justify-center\">\n                    <div className=\"spinner w-12 h-12 p-1 border-4 border-solid border-blue-600 rounded-full animate-spin\">\n                        <div className=\"inner w-full h-full border-4 border-solid border-gray-400 rounded-full\"></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Loader;\n","const toCamelcase = (string: string) =>\n    string\n        .split(\" \")\n        .map((word: string) =>\n            word\n                .split(\"\")\n                .map((letter, index) =>\n                    index === 0 ? letter.toUpperCase() : letter.toLowerCase()\n                )\n                .join(\"\")\n        )\n        .join(\" \");\n\nexport default toCamelcase;\n","import React from \"react\";\nimport { Course } from \"../types/course\";\nimport \"./CourseItem.scss\";\nimport toCamelcase from \"../utilities/toCamelcase\";\n\ntype CourseItemProps = {\n    course: Course;\n    style: any;\n};\n\nconst CourseItem = (props: CourseItemProps) => (\n    <div style={props.style}>\n        <a\n            href={\"https://www.coursera.org\" + props.course.objectUrl}\n            title={props.course.name}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"block p-3 bg-white shadow rounded border-2 border-transparent z-0 hover:bg-indigo-100 hover:border-indigo-200\"\n        >\n            <div className=\"text-lg font-semibold text-black truncate\">\n                {props.course.name}\n            </div>\n            <div className=\"text-xs my-1 text-red-600 font-medium truncate\">\n                {props.course.partners.join(\" | \") || \"-\"}\n            </div>\n            <div\n                className={\n                    \"course_type text-blue-500 text-xs font-normal \" +\n                    props.course.entityType.toLowerCase().replace(\" \", \"_\")\n                }\n            >\n                {toCamelcase(props.course.entityType)}\n            </div>\n        </a>\n    </div>\n);\n\nexport default CourseItem;\n","import React, { Component } from \"react\";\nimport { Course } from \"../types/course\";\nimport CourseItem from \"./CourseItem\";\nimport { FixedSizeList as List } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\ntype CourseListsProps = {\n    courses: Course[];\n    coursesNum: number;\n};\n\nclass CourseList extends Component<CourseListsProps> {\n    item = ({ index, style }: { index: number; style: any }) => (\n        <CourseItem\n            course={this.props.courses[index]}\n            style={{\n                ...style,\n                left: style.left + 8,\n                top: style.top + 8,\n                width: \"calc(100% - 1rem)\",\n            }}\n        />\n    );\n    render() {\n        return this.props.coursesNum > 0 ? (\n            <AutoSizer>\n                {({ height, width }) => (\n                    <List\n                        className=\"List pb-20 lg:pb-0\"\n                        height={height - (window.innerWidth < 1024 ? 82 : 180)}\n                        itemCount={this.props.coursesNum}\n                        itemSize={106}\n                        width={width}\n                    >\n                        {this.item}\n                    </List>\n                )}\n            </AutoSizer>\n        ) : (\n            <h2 className=\"text-center mt-8\">No courses found</h2>\n        );\n    }\n}\n\nexport default CourseList;\n","import React from \"react\";\nimport { BiFilterAlt } from \"react-icons/bi\";\n\nconst FiltersButtonOpen = () => (\n    <>\n        <div className=\"icon\">\n            <BiFilterAlt />\n        </div>\n        <div className=\"title ml-2 font-semibold\">Filters</div>\n    </>\n);\n\nexport default FiltersButtonOpen;\n","import React from \"react\";\nimport { BiCheck } from \"react-icons/bi\";\n\nconst FiltersButtonClose = () => (\n    <>\n        <div className=\"icon\">\n            <BiCheck />\n        </div>\n        <div className=\"title ml-2 font-semibold\">Ok</div>\n    </>\n);\n\nexport default FiltersButtonClose;\n","import React, { Component } from \"react\";\nimport FiltersButtonOpen from \"./FiltersButtonOpen\";\nimport FiltersButtonClose from \"./FiltersButtonClose\";\n\ntype FiltersButtonProps = {\n    filtersMenuIsOpen: boolean;\n    toggleFiltersMenuStatus: () => void;\n};\n\nclass FiltersButton extends Component<FiltersButtonProps> {\n    handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        this.props.toggleFiltersMenuStatus();\n    };\n\n    render() {\n        return (\n            <button\n                onClickCapture={this.handleClick}\n                className=\"fixed bottom-4 left-1/2 transform -translate-x-1/2 z-40 flex items-center justify-center w-24 h-12 bg-blue-600 rounded shadow text-white lg:hidden\"\n            >\n                {this.props.filtersMenuIsOpen ? (\n                    <FiltersButtonClose />\n                ) : (\n                    <FiltersButtonOpen />\n                )}\n            </button>\n        );\n    }\n}\n\nexport default FiltersButton;\n","import Slider from \"@material-ui/core/Slider\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst PKSlider = withStyles({\n    root: {\n        color: \"#3182ce\",\n        padding: \"2rem 0 0\",\n        width: \"calc(100% - 2rem)\",\n        left: \"1rem\",\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: \"#fff\",\n        boxShadow:\n            \"0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)\",\n        marginTop: -12,\n        marginLeft: -12,\n        \"&:focus, &:hover, &$active\": {\n            boxShadow:\n                \"0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)\",\n            // Reset on touch devices, it doesn't add specificity\n            \"@media (hover: none)\": {\n                boxShadow:\n                    \"0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)\",\n            },\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: \"calc(-50% + 0.5rem)\",\n        top: -22,\n        \"& *\": {\n            background: \"transparent\",\n            color: \"#000\",\n        },\n    },\n    track: {\n        height: 2,\n    },\n    rail: {\n        height: 2,\n        opacity: 0.2,\n        backgroundColor: \"#3182ce\",\n    },\n    mark: {\n        backgroundColor: \"#3182ce\",\n        height: 8,\n        width: 1,\n        opacity: 0.2,\n        marginTop: -3,\n    },\n    markActive: {\n        opacity: 1,\n        backgroundColor: \"currentColor\",\n    },\n})(Slider);\n\nexport default PKSlider;\n","import TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst PKInput = withStyles({\n    root: {\n        \"& .MuiInput-root, & .MuiFormLabel-root\": {\n            fontFamily: \"inherit\",\n            fontSize: \"0.8rem\",\n        },\n        \"& label.Mui-focused\": {\n            color: \"#3182ce\",\n        },\n        \"& .MuiInput-underline:before\": {\n            borderBottom: \"1px solid rgb(0 0 0 / 15%)\",\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottom: \"1px solid #3182ce\",\n        },\n        \"& .MuiOutlinedInput-root\": {\n            borderColor: \"#3182ce\",\n        },\n        \"& .MuiIconButton-root\": {\n            color: \"rgba(0, 0, 0, 0.20)\",\n        },\n        \"& .MuiAutocomplete-option\": {\n            fontSize: \"0.5rem\",\n        },\n    },\n})(TextField);\n\nexport default PKInput;\n","import Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst ITEM_SIZE = 32;\nconst LISTBOX_PADDING = 8;\n\nconst PKAutocomplete = withStyles({\n    paper: {\n        \"& .MuiAutocomplete-listbox\": {\n            padding: `${LISTBOX_PADDING}px 0`,\n        },\n    },\n    listbox: {\n        \"& .MuiAutocomplete-option\": {\n            display: \"block\",\n            lineHeight: \"1.5\",\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n            fontFamily: \"inherit\",\n            fontSize: \"0.8rem\",\n            minHeight: `${ITEM_SIZE}px`,\n        },\n    },\n    tag: {},\n})(Autocomplete);\n\nexport default PKAutocomplete;\n","import React from \"react\";\nimport { ListChildComponentProps, VariableSizeList } from \"react-window\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Autocomplete, {\n    AutocompleteRenderGroupParams,\n    AutocompleteChangeReason,\n    AutocompleteChangeDetails,\n} from \"@material-ui/lab/Autocomplete\";\nimport Input from \"./Input\";\n\ntype InputAutocompleteVirtualProps = {\n    data: string[];\n    onChange: (\n        event: React.ChangeEvent<{}>,\n        value: unknown,\n        reason: AutocompleteChangeReason,\n        details?: AutocompleteChangeDetails<unknown> | undefined\n    ) => void;\n};\n\nconst ITEM_SIZE = 32;\nconst LISTBOX_PADDING = 8;\n\nconst renderRow = (props: ListChildComponentProps) => {\n    const { data, index, style } = props;\n    return React.cloneElement(data[index], {\n        style: {\n            ...style,\n            display: \"block\",\n            lineHeight: \"1.5\",\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n            top: (style.top as number) + LISTBOX_PADDING,\n            fontFamily: \"inherit\",\n            fontSize: \"0.8rem\",\n            minHeight: `${ITEM_SIZE}px`,\n        },\n    });\n};\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n    const outerProps = React.useContext(OuterElementContext);\n    return <div ref={ref} {...props} {...outerProps} />;\n});\n\nconst useResetCache = (data: any) => {\n    const ref = React.useRef<VariableSizeList>(null);\n    React.useEffect(() => {\n        if (ref.current != null) ref.current.resetAfterIndex(0, true);\n    }, [data]);\n    return ref;\n};\n\nconst ListboxComponent = React.forwardRef<HTMLDivElement>(\n    function ListboxComponent(props, ref) {\n        const { children, ...other } = props;\n        const itemData = React.Children.toArray(children);\n        const getHeight = () => ITEM_SIZE * itemData.length;\n        const gridRef = useResetCache(itemData.length);\n\n        return (\n            <div ref={ref}>\n                <OuterElementContext.Provider value={other}>\n                    <VariableSizeList\n                        itemData={itemData}\n                        height={getHeight() + 2 * LISTBOX_PADDING}\n                        width=\"100%\"\n                        ref={gridRef}\n                        outerElementType={OuterElementType}\n                        innerElementType=\"ul\"\n                        itemSize={() => ITEM_SIZE}\n                        overscanCount={5}\n                        itemCount={itemData.length}\n                    >\n                        {renderRow}\n                    </VariableSizeList>\n                </OuterElementContext.Provider>\n            </div>\n        );\n    }\n);\n\nconst renderGroup = (params: AutocompleteRenderGroupParams) => [\n    params.children,\n];\n\nconst useStyles = makeStyles({\n    listbox: {\n        boxSizing: \"border-box\",\n        \"& ul\": {\n            padding: 0,\n            margin: 0,\n        },\n    },\n});\n\nconst InputAutocompleteVirtual = (props: InputAutocompleteVirtualProps) => (\n    <Autocomplete\n        multiple\n        disableListWrap\n        classes={useStyles()}\n        ListboxComponent={\n            ListboxComponent as React.ComponentType<\n                React.HTMLAttributes<HTMLElement>\n            >\n        }\n        onChange={props.onChange}\n        renderGroup={renderGroup}\n        options={props.data}\n        renderInput={(params) => <Input {...params} type=\"text\" />}\n    />\n);\n\nexport default InputAutocompleteVirtual;\n","import { Filter } from \"../types/filter\";\nimport { Observable, from } from \"rxjs\";\nimport algoliasearch from \"algoliasearch\";\nimport { SearchResponse } from \"@algolia/client-search\";\n\nconst search = (\n    query: string,\n    filters: Filter[],\n    facets?: string[]\n): Observable<SearchResponse<unknown>> => {\n    return from(\n        algoliasearch(\n            process.env.REACT_APP_ALGOLIA_APP_ID!,\n            process.env.REACT_APP_ALGOLIA_API_KEY!\n        )\n            .initIndex(\"prod_all_products\")\n            .search(query, {\n                facets: facets || [],\n                filters: filters\n                    .filter((filter) => filter.type === \"categorical\")\n                    .reduce((categorizedFilters, currentFilter) => {\n                        const currentFilterCategory = categorizedFilters.find(\n                            (filter) => filter.name === currentFilter.name\n                        );\n                        if (!currentFilterCategory)\n                            categorizedFilters.push({\n                                name: currentFilter.name,\n                                type: currentFilter.type,\n                                values: [currentFilter.value],\n                            });\n                        else\n                            currentFilterCategory.values.push(\n                                currentFilter.value\n                            );\n\n                        return categorizedFilters;\n                    }, [] as { name: string; type: \"categorical\" | \"numeric\"; values: string[] }[])\n                    .map(\n                        (filterCategory) =>\n                            `(${filterCategory.values.join(\" OR \")})`\n                    )\n                    .join(\" AND \"),\n                numericFilters: filters\n                    .filter((filter) => filter.type === \"numeric\")\n                    .map((filter) => filter.value),\n                maxValuesPerFacet: 1000,\n                hitsPerPage: 1000,\n            })\n    );\n};\n\nexport default search;\n","import React, { Component, RefObject, ChangeEvent } from \"react\";\nimport \"./FiltersMenu.scss\";\nimport { Course } from \"../types/course\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport Slider from \"./Slider\";\nimport Input from \"./Input\";\nimport Autocomplete from \"./Autocomplete\";\nimport AutocompleteVirtual from \"./AutocompleteVirtual\";\nimport toCamelcase from \"../utilities/toCamelcase\";\nimport { of, Subject } from \"rxjs\";\nimport {\n    distinctUntilChanged,\n    switchMap,\n    take,\n    tap,\n    debounceTime,\n} from \"rxjs/operators\";\nimport search from \"../utilities/search\";\nimport { Filter } from \"../types/filter\";\n\ntype FiltersMenuProps = {\n    filtersMenuIsOpen: boolean;\n    filtersMenuSetState: ({\n        filters,\n        courses,\n        coursesNum,\n        loading,\n    }: {\n        filters?: Filter[];\n        courses?: Course[];\n        coursesNum?: number;\n        loading?: boolean;\n    }) => void;\n    searchQuery: string;\n    partners: { name: string; courses: number }[];\n    skills: { name: string; courses: number }[];\n    productDifficultyLevel: { name: string; courses: number }[];\n    language: { name: string; courses: number }[];\n    careers: { name: string; courses: number }[];\n    entityType: { name: string; courses: number }[];\n    isPartOfCourseraPlus: { name: string; courses: number }[];\n    subtitleLanguage: { name: string; courses: number }[];\n    topic: { name: string; courses: number }[];\n    numProductRatings: { min: number; max: number };\n    enrollments: { min: number; max: number };\n    avgLearningHours: { min: number; max: number };\n};\n\ntype FiltersMenuState = {\n    filters: Filter[];\n};\n\nconst AverageRatingMarks = [\n    {\n        value: 0,\n    },\n    {\n        value: 1,\n    },\n    {\n        value: 2,\n    },\n    {\n        value: 3,\n    },\n    {\n        value: 4,\n    },\n    {\n        value: 5,\n    },\n];\n\nclass FiltersMenu extends Component<FiltersMenuProps, FiltersMenuState> {\n    filtersMenuRef: RefObject<any>;\n    averageRatingSubject$: Subject<number[]>;\n    numericInputSubject$: Subject<[string, number, string]>;\n    autocompleteInputSubject$: Subject<[string, string[]]>;\n    booleanInputSubject$: Subject<[string, boolean[]]>;\n\n    constructor(props: FiltersMenuProps) {\n        super(props);\n\n        this.filtersMenuRef = React.createRef();\n        this.state = {\n            filters: [],\n        };\n\n        this.averageRatingSubject$ = new Subject<number[]>();\n        this.averageRatingSubject$\n            .pipe(\n                distinctUntilChanged(),\n                switchMap(([min, max]) => {\n                    this.setState(\n                        (state) => {\n                            return {\n                                filters: state.filters\n                                    .filter(\n                                        (filter) =>\n                                            filter.name !== \"avgProductRating\"\n                                    )\n                                    .concat(\n                                        min === 0 && max === 5\n                                            ? []\n                                            : [\n                                                  {\n                                                      name: \"avgProductRating\",\n                                                      type: \"numeric\",\n                                                      value: `avgProductRating < ${max}`,\n                                                  } as Filter,\n                                                  {\n                                                      name: \"avgProductRating\",\n                                                      type: \"numeric\",\n                                                      value: `avgProductRating > ${min}`,\n                                                  } as Filter,\n                                              ]\n                                    ),\n                            };\n                        },\n                        () => {\n                            this.update();\n                        }\n                    );\n                    return of([]);\n                })\n            )\n            .subscribe();\n\n        this.numericInputSubject$ = new Subject<[string, number, string]>();\n        this.numericInputSubject$\n            .pipe(\n                debounceTime(500),\n                distinctUntilChanged(),\n                switchMap(([name, value, operator]) => {\n                    this.setState(\n                        (state) => {\n                            return {\n                                filters: state.filters\n                                    .filter(\n                                        (filter) =>\n                                            filter.name !== name ||\n                                            (filter.name === name &&\n                                                !filter.value.includes(\n                                                    operator\n                                                ))\n                                    )\n                                    .concat(\n                                        isNaN(value)\n                                            ? []\n                                            : [\n                                                  {\n                                                      name,\n                                                      type: \"numeric\",\n                                                      value: `${name} ${operator} ${value}`,\n                                                  } as Filter,\n                                              ]\n                                    ),\n                            };\n                        },\n                        () => {\n                            this.update();\n                        }\n                    );\n                    return of([]);\n                })\n            )\n            .subscribe();\n\n        this.autocompleteInputSubject$ = new Subject<[string, string[]]>();\n        this.autocompleteInputSubject$\n            .pipe(\n                distinctUntilChanged(),\n                switchMap(([name, value]) => {\n                    const selectedInputsAsArray: Filter[] = value.map(\n                        (selectedInput) =>\n                            ({\n                                name,\n                                type: \"categorical\",\n                                value: `${name}:'${selectedInput}'`,\n                            } as Filter)\n                    );\n                    this.setState(\n                        (state) => {\n                            return {\n                                filters: state.filters\n                                    .filter((filter) => filter.name !== name)\n                                    .concat(selectedInputsAsArray),\n                            };\n                        },\n                        () => {\n                            this.update();\n                        }\n                    );\n                    return of([]);\n                })\n            )\n            .subscribe();\n\n        this.booleanInputSubject$ = new Subject<[string, boolean[]]>();\n        this.booleanInputSubject$\n            .pipe(\n                distinctUntilChanged(),\n                switchMap(([name, value]) => {\n                    const selectedInputsAsArray: Filter[] = value.map(\n                        (selectedInput) =>\n                            ({\n                                name,\n                                type: \"categorical\",\n                                value: `${name}:${selectedInput}`,\n                            } as Filter)\n                    );\n                    this.setState(\n                        (state) => {\n                            return {\n                                filters: state.filters\n                                    .filter((filter) => filter.name !== name)\n                                    .concat(selectedInputsAsArray),\n                            };\n                        },\n                        () => {\n                            this.update();\n                        }\n                    );\n                    return of([]);\n                })\n            )\n            .subscribe();\n    }\n\n    async componentDidUpdate() {\n        if (this.props.filtersMenuIsOpen)\n            disableBodyScroll(this.filtersMenuRef.current);\n        else enableBodyScroll(this.filtersMenuRef.current);\n    }\n\n    componentWillUnmount() {\n        this.averageRatingSubject$.unsubscribe();\n        this.numericInputSubject$.unsubscribe();\n        this.booleanInputSubject$.unsubscribe();\n    }\n\n    updateAverageRating = (\n        event: React.ChangeEvent<{}>,\n        value: number | number[]\n    ): void => {\n        this.averageRatingSubject$.next(value as number[]);\n    };\n\n    updateNumericInput = (\n        name: string,\n        value: string,\n        operator: string\n    ): void => {\n        try {\n            this.numericInputSubject$.next([\n                name,\n                parseInt(value),\n                operator === \"min\" ? \">=\" : \"<=\",\n            ]);\n        } catch (error) {}\n    };\n\n    updateAutocompleteInput = (name: string, value: string[]): void => {\n        this.autocompleteInputSubject$.next([name, value]);\n    };\n\n    updateBooleanInput = (name: string, value: boolean[]): void => {\n        this.booleanInputSubject$.next([name, value]);\n    };\n\n    update = (): void => {\n        this.props.filtersMenuSetState({ loading: true });\n        search(this.props.searchQuery, this.state.filters)\n            .pipe(\n                take(1),\n                tap((results) => {\n                    this.props.filtersMenuSetState({\n                        courses: results.hits as Course[],\n                        coursesNum: results.nbHits,\n                        loading: false,\n                        filters: this.state.filters,\n                    });\n                })\n            )\n            .subscribe();\n    };\n\n    render() {\n        return (\n            <div\n                ref={this.filtersMenuRef}\n                className={\n                    (this.props.filtersMenuIsOpen ? \"open \" : \"\") +\n                    \"filters_menu fixed bottom-0 left-0 w-full z-10 bg-white p-4 overflow-y-auto pb-32 flex flex-col shadow lg:inset-auto lg:w-full lg:p-6 lg:relative lg:mt-4 lg:rounded lg:border-4\"\n                }\n            >\n                <div className=\"input_group\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Average rating [\n                        {this.state.filters.filter(\n                            (filter) => filter.name === \"avgProductRating\"\n                        ).length < 2\n                            ? \"0, 5\"\n                            : this.state.filters\n                                  .filter(\n                                      (filter) =>\n                                          filter.name === \"avgProductRating\"\n                                  )\n                                  .map((filter) => +filter.value.split(\" \")[2])\n\n                                  .sort()\n                                  .join(\", \")}\n                        ]\n                    </div>\n                    <div className=\"slider mt-2\">\n                        <Slider\n                            min={0}\n                            max={5}\n                            step={0.01}\n                            defaultValue={[0, 5]}\n                            marks={AverageRatingMarks}\n                            onChangeCommitted={this.updateAverageRating}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </div>\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Number of ratings\n                    </div>\n                    <div className=\"inputs flex align-center justify-center\">\n                        <Input\n                            onChange={(e) =>\n                                this.updateNumericInput(\n                                    \"numProductRatings\",\n                                    e.target.value,\n                                    \"min\"\n                                )\n                            }\n                            placeholder={`Min (${this.props.numProductRatings.min})`}\n                            type=\"tel\"\n                        />\n                        <span className=\"inline-block text-gray-300 mx-4 mt-1\">\n                            /\n                        </span>\n                        <Input\n                            onChange={(e) =>\n                                this.updateNumericInput(\n                                    \"numProductRatings\",\n                                    e.target.value,\n                                    \"max\"\n                                )\n                            }\n                            placeholder={`Max (${this.props.numProductRatings.max})`}\n                            type=\"tel\"\n                        />\n                    </div>\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Enrollments\n                    </div>\n                    <div className=\"inputs flex align-center justify-center\">\n                        <Input\n                            onChange={(e) =>\n                                this.updateNumericInput(\n                                    \"enrollments\",\n                                    e.target.value,\n                                    \"min\"\n                                )\n                            }\n                            placeholder={`Min (${this.props.enrollments.min})`}\n                            type=\"tel\"\n                        />\n                        <span className=\"inline-block text-gray-300 mx-4 mt-1\">\n                            /\n                        </span>\n                        <Input\n                            onChange={(e) =>\n                                this.updateNumericInput(\n                                    \"enrollments\",\n                                    e.target.value,\n                                    \"max\"\n                                )\n                            }\n                            placeholder={`Max (${this.props.enrollments.max})`}\n                            type=\"tel\"\n                        />\n                    </div>\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Average learning hours\n                    </div>\n                    <div className=\"inputs flex align-center justify-center\">\n                        <Input\n                            onChange={(e) =>\n                                this.updateNumericInput(\n                                    \"avgLearningHours\",\n                                    e.target.value,\n                                    \"min\"\n                                )\n                            }\n                            placeholder={`Min (${this.props.avgLearningHours.min})`}\n                            type=\"tel\"\n                        />\n                        <span className=\"inline-block text-gray-300 mx-4 mt-1\">\n                            /\n                        </span>\n                        <Input\n                            onChange={(e) =>\n                                this.updateNumericInput(\n                                    \"avgLearningHours\",\n                                    e.target.value,\n                                    \"max\"\n                                )\n                            }\n                            placeholder={`Max (${this.props.avgLearningHours.max})`}\n                            type=\"tel\"\n                        />\n                    </div>\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">Language</div>\n                    <Autocomplete\n                        multiple\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"language\",\n                                value as string[]\n                            );\n                        }}\n                        options={this.props.language\n                            .map((language) => language.name)\n                            .sort()}\n                        renderInput={(params) => (\n                            <div className=\"input w-full\">\n                                <Input {...params} type=\"text\" />\n                            </div>\n                        )}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Difficulty level\n                    </div>\n                    <Autocomplete\n                        multiple\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"productDifficultyLevel\",\n                                value as string[]\n                            );\n                        }}\n                        options={this.props.productDifficultyLevel\n                            .map(\n                                (productDifficultyLevel) =>\n                                    productDifficultyLevel.name\n                            )\n                            .sort()}\n                        renderInput={(params) => (\n                            <div className=\"input w-full\">\n                                <Input {...params} type=\"text\" />\n                            </div>\n                        )}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">Type</div>\n                    <Autocomplete\n                        multiple\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"entityType\",\n                                value as string[]\n                            );\n                        }}\n                        options={this.props.entityType\n                            .map((type) => toCamelcase(type.name))\n                            .sort()}\n                        renderInput={(params) => (\n                            <div className=\"input w-full\">\n                                <Input {...params} type=\"text\" />\n                            </div>\n                        )}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">Partners</div>\n                    <AutocompleteVirtual\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"partners\",\n                                value as string[]\n                            );\n                        }}\n                        data={this.props.partners\n                            .map((partner) => partner.name)\n                            .sort()}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">Skills</div>\n                    <AutocompleteVirtual\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"skills\",\n                                value as string[]\n                            );\n                        }}\n                        data={this.props.skills\n                            .map((skill) => skill.name)\n                            .sort()}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">Careers</div>\n                    <AutocompleteVirtual\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"careers\",\n                                value as string[]\n                            );\n                        }}\n                        data={this.props.careers\n                            .map((career) => career.name)\n                            .sort()}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Subtitle Language\n                    </div>\n                    <AutocompleteVirtual\n                        onChange={(event, value, reason) => {\n                            this.updateAutocompleteInput(\n                                \"subtitleLanguage\",\n                                value as string[]\n                            );\n                        }}\n                        data={this.props.subtitleLanguage\n                            .map((subtitleLanguage) => subtitleLanguage.name)\n                            .sort()}\n                    />\n                </div>\n                <div className=\"input_group mt-8\">\n                    <div className=\"label text-xs text-gray-600\">\n                        Is part of Coursera Plus\n                    </div>\n                    <Autocomplete\n                        multiple\n                        onChange={(event, value, reason) => {\n                            this.updateBooleanInput(\n                                \"isPartOfCourseraPlus\",\n                                (value as string[]).map(\n                                    (value) => value === \"Yes\"\n                                )\n                            );\n                        }}\n                        options={[\"Yes\", \"No\"]}\n                        renderInput={(params) => (\n                            <div className=\"input w-full\">\n                                <Input {...params} type=\"text\" />\n                            </div>\n                        )}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FiltersMenu;\n","import React, { Component, RefObject } from \"react\";\nimport { fromEvent, Subscription } from \"rxjs\";\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    tap,\n    switchMap,\n} from \"rxjs/operators\";\nimport { Course } from \"../types/course\";\nimport { SearchResponse } from \"@algolia/client-search\";\nimport search from \"../utilities/search\";\nimport { Filter } from \"../types/filter\";\nimport \"./Search.scss\";\n\ntype SearchProps = {\n    searchSetState: ({\n        query,\n        courses,\n        coursesNum,\n        loading,\n    }: {\n        query?: string;\n        courses?: Course[];\n        coursesNum?: number;\n        loading?: boolean;\n    }) => void;\n    filters: Filter[];\n};\n\nclass Search extends Component<SearchProps> {\n    inputRef: RefObject<HTMLInputElement>;\n    inputSubscription: Subscription | undefined;\n    searchSubscription: Subscription | undefined;\n\n    constructor(props: SearchProps) {\n        super(props);\n\n        this.inputRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.inputSubscription = fromEvent(this.inputRef.current!, \"input\")\n            .pipe(\n                map((event: Event) => (event.target as HTMLInputElement).value),\n                debounceTime(500),\n                distinctUntilChanged(),\n                switchMap((value: string) => {\n                    this.props.searchSetState({ query: value, loading: true });\n                    return search(value, this.props.filters);\n                }),\n                tap((results: SearchResponse<unknown>) => {\n                    this.props.searchSetState({\n                        courses: results.hits as Course[],\n                        coursesNum: results.nbHits,\n                        loading: false,\n                    });\n                })\n            )\n            .subscribe();\n    }\n\n    componentWillUnmount() {\n        this.inputSubscription!.unsubscribe();\n    }\n\n    render() {\n        return (\n            <div className=\"search w-full p-2 bg-blue-500 z-30 lg:bg-transparent lg:p-0 lg:border-4 lg:rounded\">\n                <input\n                    ref={this.inputRef}\n                    type=\"text\"\n                    className=\"w-full rounded py-2 px-3 font-normal\"\n                    placeholder=\"Search...\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./CoursesNum.scss\";\n\ntype CoursesNumProps = {\n    coursesNum: number;\n};\n\nconst CoursesNum = (props: CoursesNumProps) => {\n    return (\n        <h4 className=\"absolute w-full p-1 text-xs text-center bg-gray-100 z-20 shadow lg:relative lg:shadow-none lg:bg-transparent lg:text-lg lg:text-left lg:text-gray-600\">\n            {props.coursesNum} Courses\n        </h4>\n    );\n};\n\nexport default CoursesNum;\n","import React from \"react\";\n\nconst Logo = () => (\n    <h1 className=\"text-left mb-4 hidden justify-between items-center lg:flex\">\n        <span className=\"block text-2xl text-blue-600\">Coursera Search</span>\n        <a\n            href=\"https://pkyriazo.github.io\"\n            title=\"Panagiotis Kyriazopoulos homepage\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex justify-center items-center border-8 border-transparent w-20 h-20 rounded-full overflow-hidden hover:border-indigo-200\"\n        >\n            <img\n                src=\"https://avatars1.githubusercontent.com/u/25479457?s=460&u=7324d23b652ee6edec65add59033423fe21aacb7&v=4\"\n                alt=\"Panagiotis Kyriazopoulos\"\n            />\n        </a>\n    </h1>\n);\n\nexport default Logo;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Loader from \"./components/Loader\";\nimport { Course } from \"./types/course\";\nimport CourseList from \"./components/CourseList\";\nimport FiltersButton from \"./components/FiltersButton\";\nimport FiltersMenu from \"./components/FiltersMenu\";\nimport Search from \"./components/Search\";\nimport search from \"./utilities/search\";\nimport CoursesNum from \"./components/CoursesNum\";\nimport { tap, take } from \"rxjs/operators\";\nimport { Filter } from \"./types/filter\";\nimport { of } from \"rxjs\";\nimport Logo from \"./components/Logo\";\n\ntype AllData = {\n    courses: Course[];\n    coursesNum: number;\n    partners: { name: string; courses: number }[];\n    skills: { name: string; courses: number }[];\n    productDifficultyLevel: { name: string; courses: number }[];\n    language: { name: string; courses: number }[];\n    careers: { name: string; courses: number }[];\n    entityType: { name: string; courses: number }[];\n    isPartOfCourseraPlus: { name: string; courses: number }[];\n    subtitleLanguage: { name: string; courses: number }[];\n    topic: { name: string; courses: number }[];\n    enrollments: { min: number; max: number };\n    avgLearningHours: { min: number; max: number };\n    numProductRatings: { min: number; max: number };\n};\n\ntype AppState = {\n    loading: boolean;\n    filtersMenuIsOpen: boolean;\n    courses: Course[];\n    coursesNum: number;\n    search: {\n        query: string;\n        filters: Filter[];\n    };\n};\n\nclass App extends Component<{}, AppState> {\n    allData: AllData;\n\n    constructor(props: {}) {\n        super(props);\n\n        this.allData = {\n            courses: [],\n            coursesNum: 0,\n            partners: [],\n            skills: [],\n            productDifficultyLevel: [],\n            language: [],\n            careers: [],\n            entityType: [],\n            isPartOfCourseraPlus: [],\n            subtitleLanguage: [],\n            topic: [],\n            enrollments: { min: 0, max: 0 },\n            avgLearningHours: { min: 0, max: 0 },\n            numProductRatings: { min: 0, max: 0 },\n        };\n\n        this.state = {\n            loading: true,\n            filtersMenuIsOpen: false,\n            courses: [],\n            coursesNum: 0,\n            search: {\n                query: \"\",\n                filters: [],\n            },\n        };\n    }\n\n    componentDidMount() {\n        this.getAllData();\n    }\n\n    getAllData = (): void => {\n        search(\"\", [], [\"*\"])\n            .pipe(\n                take(1),\n                tap((results) => {\n                    this.allData.courses = results.hits as Course[];\n                    this.allData.coursesNum = results.nbHits;\n                    [\n                        \"partners\",\n                        \"skills\",\n                        \"productDifficultyLevel\",\n                        \"language\",\n                        \"careers\",\n                        \"entityType\",\n                        \"isPartOfCourseraPlus\",\n                        \"subtitleLanguage\",\n                        \"topic\",\n                    ].forEach((facet) => {\n                        if (!results.facets || !results.facets![facet]) return;\n\n                        this.allData[facet] = Object.keys(\n                            results.facets![facet]\n                        ).map((name) => ({\n                            name,\n                            courses: results.facets![facet][name],\n                        }));\n                    });\n\n                    if (results.facets && results.facets.enrollments) {\n                        of(\n                            Object.keys(results.facets.enrollments).map(\n                                (enrollment: string) => +enrollment\n                            )\n                        )\n                            .pipe(\n                                take(1),\n                                tap((enrollments) => {\n                                    this.allData.enrollments = {\n                                        max: Math.max(...enrollments),\n                                        min: Math.min(...enrollments),\n                                    };\n                                })\n                            )\n                            .subscribe();\n                    }\n\n                    if (results.facets && results.facets.avgLearningHours) {\n                        of(\n                            Object.keys(results.facets.avgLearningHours).map(\n                                (enrollment: string) => +enrollment\n                            )\n                        )\n                            .pipe(\n                                take(1),\n                                tap((avgLearningHours) => {\n                                    this.allData.avgLearningHours = {\n                                        max: Math.max(...avgLearningHours),\n                                        min: Math.min(...avgLearningHours),\n                                    };\n                                })\n                            )\n                            .subscribe();\n                    }\n\n                    if (results.facets && results.facets.numProductRatings) {\n                        of(\n                            Object.keys(results.facets.numProductRatings).map(\n                                (enrollment: string) => +enrollment\n                            )\n                        )\n                            .pipe(\n                                take(1),\n                                tap((numProductRatings) => {\n                                    this.allData.numProductRatings = {\n                                        max: Math.max(...numProductRatings),\n                                        min: Math.min(...numProductRatings),\n                                    };\n                                })\n                            )\n                            .subscribe();\n                    }\n\n                    this.setState({\n                        loading: false,\n                        courses: this.allData.courses,\n                        coursesNum: this.allData.coursesNum,\n                    });\n                })\n            )\n            .subscribe();\n    };\n\n    searchSetState = ({\n        query,\n        courses,\n        coursesNum,\n        loading,\n    }: {\n        query?: string;\n        courses?: Course[];\n        coursesNum?: number;\n        loading?: boolean;\n    }): void => {\n        this.setState((state) => ({\n            courses: courses === undefined ? this.allData.courses : courses,\n            coursesNum:\n                coursesNum === undefined ? state.coursesNum : coursesNum,\n            loading: loading === undefined ? state.loading : loading,\n            search: {\n                ...state.search,\n                query: query === undefined ? state.search.query : query,\n            },\n        }));\n    };\n\n    filtersMenuSetState = ({\n        filters,\n        courses,\n        coursesNum,\n        loading,\n    }: {\n        filters?: Filter[];\n        courses?: Course[];\n        coursesNum?: number;\n        loading?: boolean;\n    }): void => {\n        this.setState((state) => ({\n            courses: courses === undefined ? state.courses : courses,\n            coursesNum:\n                coursesNum === undefined ? state.coursesNum : coursesNum,\n            loading: loading === undefined ? state.loading : loading,\n            search: {\n                ...state.search,\n                filters: filters === undefined ? state.search.filters : filters,\n            },\n        }));\n    };\n\n    toggleFiltersMenuStatus = (): void => {\n        this.setState((state) => {\n            return {\n                filtersMenuIsOpen: !state.filtersMenuIsOpen,\n            };\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App flex flex-col overflow-hidden h-screen bg-gray-200\">\n                <Loader loading={this.state.loading} />\n                <FiltersButton\n                    filtersMenuIsOpen={this.state.filtersMenuIsOpen}\n                    toggleFiltersMenuStatus={this.toggleFiltersMenuStatus}\n                />\n                <div className=\"relative lg:container lg:mx-auto\">\n                    <div className=\"select-none lg:mt-6 lg:mb-4\">\n                        <Logo />\n                        <CoursesNum coursesNum={this.state.coursesNum} />\n                    </div>\n                    <div className=\"lg:flex lg:h-full\">\n                        <div className=\"lg:w-1/3 lg:mr-4 lg:flex lg:flex-col lg:relative lg:overflow-y-auto\">\n                            <Search\n                                searchSetState={this.searchSetState}\n                                filters={this.state.search.filters}\n                            />\n                            <FiltersMenu\n                                filtersMenuIsOpen={this.state.filtersMenuIsOpen}\n                                filtersMenuSetState={this.filtersMenuSetState}\n                                searchQuery={this.state.search.query}\n                                partners={this.allData.partners}\n                                skills={this.allData.skills}\n                                productDifficultyLevel={\n                                    this.allData.productDifficultyLevel\n                                }\n                                language={this.allData.language}\n                                careers={this.allData.careers}\n                                entityType={this.allData.entityType}\n                                isPartOfCourseraPlus={\n                                    this.allData.isPartOfCourseraPlus\n                                }\n                                subtitleLanguage={this.allData.subtitleLanguage}\n                                topic={this.allData.topic}\n                                enrollments={this.allData.enrollments}\n                                avgLearningHours={this.allData.avgLearningHours}\n                                numProductRatings={\n                                    this.allData.numProductRatings\n                                }\n                            />\n                        </div>\n                        <div className=\"h-screen lg:w-2/3\">\n                            <CourseList\n                                courses={this.state.courses}\n                                coursesNum={this.state.coursesNum}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/tailwind.output.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}